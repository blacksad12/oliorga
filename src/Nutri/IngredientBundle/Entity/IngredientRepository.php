<?php

namespace Nutri\IngredientBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * IngredientRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class IngredientRepository extends EntityRepository
{
    /** ************************************************************************
     * Get the paginated list of published articles
     *
     * @param int $page
     * @param int $maxperpage
     * @param string $orderBy
     * @return \Doctrine\ORM\Tools\Pagination\Paginator
     **************************************************************************/
    public function getList($page=1, $maxperpage=30, $orderBy='name') {
        $em = $this->getEntityManager();
        $qb = $em->createQueryBuilder();

        $qb->select('i');
        $qb->from('NutriIngredientBundle:Ingredient','i');
        if($orderBy !== NULL) {
            $qb->orderBy('i.'.$orderBy);
        }

        $qb->setFirstResult(($page-1) * $maxperpage);
        $qb->setMaxResults($maxperpage);

        return new \Doctrine\ORM\Tools\Pagination\Paginator($qb);
    }
    
    /** ************************************************************************
     * Count the total number of Ingredient
     * @return int
     **************************************************************************/
    public function countTotal() {
        $em = $this->getEntityManager();
        $qb = $em->createQueryBuilder();
        $qb->select('count(i.id)');
        $qb->from('NutriIngredientBundle:Ingredient','i');

        $count = $qb->getQuery()->getSingleScalarResult();
        return $count;
    }
    
    /**
     * /!\ UNUSED ??
     * @return type
     */
    public function getNamesById() {
        $em = $this->getEntityManager();
        $qb = $em->createQueryBuilder();
        
        $qb->select('i.id');
        $qb->addSelect('i.name');     
        
        $qb->from('NutriIngredientBundle:Ingredient','i');        
        $qb->setMaxResults(0);
        
        $result = $qb->getQuery()->getResult();
        $resultArray = array();
        foreach($result as $ingredient) {
            $resultArray[$ingredient['id']] = $ingredient['name'];
        }
        
            
        return $resultArray;
    }
}
