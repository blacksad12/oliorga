<?php

namespace Finance\OperationBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\QueryBuilder;

/**
 * AbstractOperationRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class AbstractOperationRepository extends EntityRepository
{
    
    /** ************************************************************************
     * Get the balance of all the AbstractOperation which match the criteria in $parameters
     * @param array $parameters
     * @return int
     **************************************************************************/
    public function getBalance(array $parameters) {        
        $this->checkParameters($parameters);
        
        $em = $this->getEntityManager();
        $qb = $em->createQueryBuilder();
        
        $qb->select('SUM(COALESCE(o.amount,0)) + SUM(COALESCE(it.amount,0)) - SUM(COALESCE(ot.amount,0)) as balance');
        $qb->from('FinanceOperationBundle:AbstractOperation','ao');        
        
        if($parameters['account'] == NULL){
            $qb->leftJoin('FinanceOperationBundle:Operation', 'o','WITH',$qb->expr()->eq('ao.id', 'o.id'));
            $qb->leftJoin('FinanceOperationBundle:TransferBetweenAccount', 'it','WITH',$qb->expr()->eq('ao.id', 'it.id'));
            $qb->leftJoin('FinanceOperationBundle:TransferBetweenAccount', 'ot','WITH',$qb->expr()->eq('ao.id', 'ot.id'));
        }
        else{            
           $qb->leftJoin('FinanceOperationBundle:Operation', 'o','WITH',$qb->expr()->andX(
                        $qb->expr()->eq('ao.id', 'o.id'),
                        $qb->expr()->eq('o.account', ':account')))
                     ->setParameter('account', $parameters['account'])
                ->leftJoin('FinanceOperationBundle:TransferBetweenAccount', 'it','WITH',$qb->expr()->andX(
                        $qb->expr()->eq('ao.id', 'it.id'),
                        $qb->expr()->eq('it.destinationAccount', ':account')))
                     ->setParameter('account', $parameters['account'])
                ->leftJoin('FinanceOperationBundle:TransferBetweenAccount', 'ot','WITH',$qb->expr()->andX(
                        $qb->expr()->eq('ao.id', 'ot.id'),
                        $qb->expr()->eq('ot.sourceAccount', ':account')))
                     ->setParameter('account', $parameters['account'])
                     ;
        }
        
        $this->filterByDate($qb, $parameters);
        $this->filterByMarked($qb, $parameters);
               
        $result = $qb->getQuery()->getSingleResult();
        return $result['balance'];
    }
    
    /** ************************************************************************
     * Check if all the parameters are recognized by the class
     * 
     * @param array $parameters
     * @throws \InvalidArgumentException
     **************************************************************************/
    protected function checkParameters(array $parameters) {
        foreach($parameters as $parameterKey=>$parameterValue){
            if(     $parameterKey == 'startDate'        && $parameterValue instanceof \DateTime){}
            elseif( $parameterKey == 'endDate'          && $parameterValue instanceof \DateTime){}
            elseif( $parameterKey == 'isMarked'         && is_bool($parameterValue)){}
            elseif( $parameterKey == 'account'          && $parameterValue instanceof \Finance\AccountBundle\Entity\Account){}
            else{
                throw new \InvalidArgumentException("The parameter with key: '".$parameterKey."' is not valid");
            }
        }
    }

    /** ************************************************************************
     * Filter the result which are after startDate and/or before endDate
     * @param QueryBuilder $qb
     * @param array $parameters
     **************************************************************************/
    protected function filterByDate(QueryBuilder $qb, array $parameters) {
        if(isset($parameters['startDate'])) {
            $qb->andWhere($qb->expr()->gte('ao.date', ':startDate'));
            $qb->setParameter('startDate', $parameters['startDate']);
        }
        
        if(isset($parameters['endDate'])) {
            $qb->andWhere($qb->expr()->lte('ao.date', ':endDate'));
            $qb->setParameter('endDate', $parameters['endDate']);
        }
    }
    
    /** ************************************************************************
     * Filter the result which are pointé or not pointé
     * @param QueryBuilder $qb
     * @param array $parameters
     **************************************************************************/
    protected function filterByMarked(QueryBuilder $qb, array $parameters) {
        if(isset($parameters['isMarked'])) {
            $qb->andWhere($qb->expr()->eq('ao.isMarked', ':isMarked'));
            $qb->setParameter('isMarked', $parameters['isMarked']);
        }         
    }
    
    
    public function getSolde($compte, $dateMin=null, $dateMax=null, $isPointe=null )
    {
        if($dateMax == 'now'){
            $dateMax = new \DateTime();
        }
        
        $em = $this->getEntityManager();
        $qb = $em->createQueryBuilder();
        
        $qb->select('SUM(COALESCE(o.montant,0)) + SUM(COALESCE(it.montant,0)) - SUM(COALESCE(ot.montant,0)) as solde')
                ;           
        
        $qb->from('FinanceOperationBundle:AbstractOperation','ao');        
        
        // ---------------------------------------------------------------------
        // -------------------------- Compte ----------------------------------
        if($compte == NULL){
            $qb->leftJoin('FinanceOperationBundle:Operation', 'o','WITH',$qb->expr()->eq('ao.id', 'o.id'))
                ->leftJoin('FinanceOperationBundle:Intercompte', 'it','WITH',$qb->expr()->eq('ao.id', 'it.id'))
                ->leftJoin('FinanceOperationBundle:Intercompte', 'ot','WITH',$qb->expr()->eq('ao.id', 'ot.id'))
                ;
        }
        else{            
           $qb->leftJoin('FinanceOperationBundle:Operation', 'o','WITH',$qb->expr()->andX(
                        $qb->expr()->eq('ao.id', 'o.id'),
                        $qb->expr()->eq('o.compte', ':compte')))
                     ->setParameter('compte', $compte)
                ->leftJoin('FinanceOperationBundle:Intercompte', 'it','WITH',$qb->expr()->andX(
                        $qb->expr()->eq('ao.id', 'it.id'),
                        $qb->expr()->eq('it.compteDestination', ':compte')))
                     ->setParameter('compte', $compte)
                ->leftJoin('FinanceOperationBundle:Intercompte', 'ot','WITH',$qb->expr()->andX(
                        $qb->expr()->eq('ao.id', 'ot.id'),
                        $qb->expr()->eq('ot.compteSource', ':compte')))
                     ->setParameter('compte', $compte)
                     ;
        }
        
        // ---------------------------------------------------------------------
        // -------------------------- DateMax ----------------------------------
        if($dateMax != NULL){
            $qb->andWhere($qb->expr()->lte('ao.date', ':dateMax'))->setParameter('dateMax', $dateMax);
        }
        
        // ---------------------------------------------------------------------
        // -------------------------- DateMin ----------------------------------
        if($dateMin != NULL){
            $qb->andWhere($qb->expr()->gte('ao.date', ':dateMin'))->setParameter('dateMin', $dateMin);
        }
        
        // ---------------------------------------------------------------------
        // --------------------- Pointé/NonPointé ------------------------------
        if($isPointe === 'pointe'){
            $qb->andWhere($qb->expr()->eq('ao.isPointe', ':isPointe'))->setParameter('isPointe', true);
        }
        elseif($isPointe === 'nonPointe'){
            $qb->andWhere($qb->expr()->eq('ao.isPointe', ':isPointe'))->setParameter('isPointe', false);
        }
        elseif($isPointe === 'all'){
            // Nothing to do
        }
        else{
            throw new InvalidArgumentException('Param $isPointe is not valid');
        }
                
        $result = $qb->getQuery()
                  ->getSingleResult();
        return $result['solde'];
    }
}
